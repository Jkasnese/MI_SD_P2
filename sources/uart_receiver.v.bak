/*
    Module to receive serial data and output paralel 8 bits data.
    If number of bits in a package is less than 8, appends 0s to MSBs to complete 8 bit bus.

    TODO: Implement handshake protocol.
*/

module uart_receiver (
    input reset,
    input clk,
    input timeout,

    input serial_in,
    input handshake, // 1 y, 0 n
    input [1:0] data_bits, // 11 5, 10 6, 01 7, 00 8;
    
    output start_clk,
    output receiving,
    output [7:0] data_in,
    output data_ready,
//    output everything_ready
);

//localparam max_packages = 9000;
//localparam packages_counter_width = log2(max_packages);

//reg [15:0] packages_counter;
//reg [15:0] total_packages;

//localparam timeout = 60; // Timeout in seconds
// TODO: implement timeout

reg [7:0] data_received;
reg [3:0] bits_received;
reg [3:0] data_width;
reg done;


assign data_ready = done;
assign start_clk = (!serial_in) && (bits_received != 4'd0); 

wire receiving = bits_received != 4'd0;
wire wire_data_in;

// Data_bits decoder to data width and data_in bus index
always @ (posedge clk) begin
    case (data_bits)
        2'b11: begin
            wire_data_in <= {3'b0, data_received[7:3]};
            data_width <= 4'b0101;
        end
        2'b10: begin
            wire_data_in <= {2'b0, data_received[7:2]};
            data_width <= 4'b0110;
        end
        2'b01: begin
            wire_data_in <= {1'b0, data_received[7:1]};
            data_width <= 4'b0111;
        end
        2'b00: begin
            wire_data_in <= data_received;
            data_width <= 4'1000;
        end
    endcase
end

// Receive bits into shift register
always @ (posedge clk) begin
    if (reset == 1'b1 || timeout == 1'b1) begin
        bits_received <= 4'd0;
        done <= 1'b0;
        total_packages <= 16'd0;
    end
    else begin
        if (bits_received < data_width) begin
            done <= 1'b0;
            data_received <= {serial_in, data_received[7:1]};
            bits_received <= bit_received + 1'b1;
        end
        else begin
            done <= 1'b1;
            bits_received <= 4'd0;
/*            packages_counter <= packages_counter + 1'b1;
            if (packages_counter < 16'd2) begin
                total_packages <= total_packages + data_received;
            end

            if (packages_counter == total_packages) begin

        end*/
    end
end

endmodule
